Builder设计模式
/**
 * Builder设计模式
 * 定义一个静态内部类Builder，内部的成员变量和外部类一样
 * Builder类通过一系列的方法用于成员变量的赋值，并返回当前对象本身（this）
 * Builder类提供一个build方法或者create方法用于创建对应的外部类，该方法内部调用了外部类的一个私有构造函数，该构造函数的参数就是内部类Builder
 * 外部类提供一个私有构造函数供内部类调用，在该构造函数中完成成员变量的赋值，取值为Builder对象中对应的值
 */
Person.Builder builder = new Person.Builder();
Person person = builder.name("张三").age(19).height(188).weight(160).builder();
System.out.println("Hello " + person.toString());

class Person {
    private String name;
    private int age;
    private double height;
    private double weight;

    private Person(Builder builder) {
        this.name = builder.name;
        this.age = builder.age;
        this.height = builder.height;
        this.weight = builder.weight;
    }

    public String toString() {
        String str =  Person.class.getName() + " name = " + name + " aget = " + age + " height = " + height + " weight = " + weight;
        System.out.println(" Hello " + str);
        return str;
    }

    static class Builder {
        private String name;
        private int age;
        private double height;
        private double weight;

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder age(int age) {
            this.age = age;
            return this;
        }

        public Builder height(double height) {
            this.height = height;
            return this;
        }

        public Builder weight(double weight) {
            this.weight = weight;
            return this;
        }

        public Person builder() {
            return new Person(this);
        }
    }
}
